'use strict'

var api = require('app_api')

var calculateVotes = (beers) => {
  var voteSum, voteCount, averageVote
  for (var i = 0; i < beers.length; i++) {
    voteSum = 0
    voteCount = beers.votes.length
    for (var j = 0; j < beers[i].votes.length; j++) {
      voteSum += beers[i].votes[j].vote
    }
    averageVote = voteSum / voteCount
  }
  return averageVote
}

module.exports = {
  state: {
    beers: []
  },
  getters: {
    beers (state) {
      return state.beers
    }
  },
  actions: {
    beers_fetch (store) {
      console.log(api.beers)
      return api.beers.get()
        .then(
          response => {
            store.commit('BEERS_SET', response.data)
            return response.data
          },
          response => {
            var message = 'Error: status: ' + response.status + ' - message: ' + response.message
            var id = 'beers_fetch' + response.status
            store.dispatch('messages_set_error', {id, message})
            return Promise.reject(response.data)
          }
        )
    },
    beers_vote (store, payload) {
      return api.beers.update({id: store.state.beers[payload.index].id, vote: payload.vote})
        .then(
          response => {
            var id = 'beers_putVote' + response.status
            store.dispatch('beers_fetch')
            store.dispatch('messages_set_success', {id, message: 'Your vote was successfully added'})
            return response.data
          },
          response => {
            var message = 'Error: status: ' + response.status + ' - message: ' + response.message
            var id = 'beers_putVote' + response.status
            store.dispatch('messages_set_error', {id, message})
            return Promise.reject(response.data)
          }
        )
    }
  },
  mutations: {
    BEERS_SET(state, beers) {
      state.beers = beers
    }
  }
}
